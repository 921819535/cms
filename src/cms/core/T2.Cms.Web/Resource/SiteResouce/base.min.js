function JR() { this.VERSION = '3.2'; this.WORKPATH = ''; this._Extend_PROTOTYPE = true; this._eventArray = ["abort", "blur", "change", "click", "dblclick", "error", "focus", "keydown", "keypress", "keyup", "load", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "reset", "resize", "select", "submit", "unload"]; this.__init__ = function () { var a = document.getElementsByTagName('SCRIPT'); var s = a[a.length - 1]; var b = s.src; this.WORKPATH = b.replace(/(\/)[^/]+$/, '$1'); if (this._Extend_PROTOTYPE) { this.__extendingJsPrototype__() } this.dom.set(this); return this }; this.__extendingJsPrototype__ = function () { String.prototype.len = function (a) { return this.replace(a ? /[\u0391-\uFFE5]/g : /[^x00-xff]/g, "00").length }; Array.prototype.remove = function (a, b) { var c = this.slice((b || a) + 1 || this.length); this.length = a < 0 ? this.length + a : a; return this.push.apply(this, c) }; if (!Object.create) { Object.create = function (o) { function _() { } _.prototype = o; return new _() } } if (typeof (HTMLElement) != "undefined") { HTMLElement.prototype.contains = function (a) { while (a != null && typeof (a.tagName) != "undefined") { if (a == this) return true; a = a.parentNode } return false } } if (!window.JSON) { window.JSON = { parse: function (s) { return eval('(' + s + ')') } } } } } JR.prototype = { request: function (a, b) { var c = new RegExp('(\\?|&)' + a + '=([^&]+)&*').exec(b ? b : location.href); return c ? c[2] : '' }, path: function () { var d = document.domain, uri = location.href; d = uri.substring(uri.indexOf(d) + d.length); return d.substring(d.indexOf("/")) }, eval: function (a) { if (!a) return a; if (window.execScript) { window.execScript(a) } else { var b = document.createElement('SCRIPT'); b.setAttribute('type', 'text/javascript'); b.text = a; document.head.appendChild(b); document.head.removeChild(b) } return a }, each: function (a, b) { if (!a) return; for (var i = 0; i < a.length; i++)b(i, a[i]) }, template: function (a, b) { if (b instanceof Object) { var c = new RegExp(); for (var n in b) { c.compile('%' + n + '%|\{' + n + '\}', 'g'); a = a.replace(c, b[n]) } } return a }, extend: function (a) { if (a && a instanceof Object) { for (var b in a) { if (this[b] == undefined) { this[b] = a[b] } } } return this }, $fn: function (a) { return this.fn.create(a, this) }, selector: { getByClassName: function (a, e) { if (!e.getElementsByClassName) { var b = (e || document).getElementsByTagName('*'); var c = new RegExp('\\s' + a + '\\s'); var d = []; for (var i = 0, j; j = b[i]; i++) { if (c.test(' ' + j.className + ' ')) d.push(j) } return d } return e.getElementsByClassName(a) }, finds: function (a, b) { a = a.replace(/^\s|\s$/g, '').replace(/\s+/, ' '); var c = b && b.nodeName ? [b] : (b || [document]); var d = a.split(' '); return this.walk(c, d, 0) }, findBy: function (a, b) { var c = []; for (var i = 0; i < a.length; i++) { var d = b(a[i]) || []; for (var j = 0; j < d.length; j++) { c.push(d[j]) } } return c }, walk: function (a, b, c) { var d = []; var f = b[c]; switch (f[0]) { case "#": d = this.findBy(a, function () { var e = document.getElementById(f.substring(1)); return e ? [e] : [] }); break; case ".": d = this.findBy(a, (function (t) { return function (p) { return t.getByClassName(f.substring(1), p) } })(this)); break; default: d = this.findBy(a, function (p) { return p.getElementsByTagName(f) }); break }if (c < b.length - 1) { return this.walk(d, b, c + 1) } return d } }, fn: { g: {}, eleList: [], fnList: null, fnProps: { 'check': ['checked', true], 'disabled': ['disabled', true], 'uncheck': ['checked', false], }, _fn: function (a) { return this.create(a, this.g) }, extend: function (a) { return this.g.extend.apply(this, a) }, create: function (a, g) { return Object.create(this).init(a, g) }, init: function (e, g) { this.g = g; this.fnList = null; if (typeof (e) == "string") { this.eleList = this.g.selector.finds(e) } else if (e instanceof Array || e instanceof HTMLCollection) { this.eleList = e } else if (e.nodeName) { this.eleList = [e] } var c = this; this.g.each(this.g._eventArray, function (i, e) { c[e] = (function (e) { return function (a, b) { c.event(e, a, b) } })(e) }); for (var k in this.fnProps) { this[k] = (function (k, a) { return function () { a.caller(function (e) { var p = a.fnProps[k]; e[p[0]] = p[1] }) } })(k, this) } return this }, _single: function () { if (this.len() > 0) { return this.eleList[0] } return null }, _chkFnList: function () { with (this) { if (fnList) return; fnList = []; for (var i = 0, j = len(); i < j; i++) { fnList.push(_fn([eleList[i]])) } } }, _factFn: function (i, b) { return (function (p) { return function (a) { b.apply(p, [a]) } })(this.get(i)) }, each: function (a) { this._chkFnList(); this.g.each(this.fnList, a) }, get: function (i) { this._chkFnList(); if (i >= 0 && i <= this.fnList.length - 1) { return this.fnList[i] } return this._fn(null) }, first: function () { return this.get(0) }, last: function () { return this.get(this.len() - 1) }, caller: function (c) { for (var i = 0, j = this.len(); i < j; i++) { c.call(this, this.eleList[i], i) } }, event: function (b, c, d) { var f = this; this.caller(function (e, i) { if (c) { var a = f._factFn(i, c); if (d) { this.g.event.add(e, b, a) } else { e["on" + b] = a } } else { e["on" + b]() } }) }, elem: function () { if (this.len() == 1) { return this.eleList[0] } return this.eleList }, len: function () { return this.eleList.length }, find: function (a) { var b = this.g.selector.finds(a, this.eleList); return this._fn(b) }, parent: function () { var e = this._single(); if (e) { e = e.parentNode; return this._fn(e) } return null }, prev: function () { var e = this._single().previousSibling; if (e) return this._fn(e); return null }, next: function () { var e = this._single().nextSibling; if (e) return this._fn(e); return null }, attr: function (a, v) { if (v == null) { var e = this._single(); return e.getAttribute(a) || e[a] } var b = typeof (v) == "boolean"; this.caller(function (e) { b ? e[a] = v : e.setAttribute(a, v) }) }, removeAttr: function (a) { this.caller(function (e) { e.removeAttribute(a) }) }, css: function (a) { if (!(a instanceof Object)) { return this._single().currentStyle || document.defaultView.getComputedStyle(this._single(), null) } for (var s in a) { var b = s.split("-"); for (var i = 1; i < b.length; i++) { b[i] = b[i].replace(b[i].charAt(0), b[i].charAt(0).toUpperCase()) } var c = b.join(''); this.caller(function (e) { e.style[c] = a[s] }) } }, hasClass: function (c) { var a = new RegExp('(\\s|^)' + c + '(\\s|$)'); return this._single().className.match(a) ? true : false }, addClass: function (c) { this.each(function (i, e) { if (!e.hasClass(c)) e.elem().className += ' ' + c }) }, removeClass: function (c) { var a = new RegExp('(\\s|^)' + c + '((\\s)|$)'); this.caller(function (e) { e.className = e.className.replace(a, "$3") }) }, position: function () { return this._single().getBoundingClientRect() }, html: function (v) { if (v == null) return this._single().innerHTML; this.caller(function (e) { e.innerHTML = v }) }, before: function (a) { this.caller(function (e) { e.parentNode && e.parentNode.insertBefore(a, e) }) }, after: function (a) { this.caller(function (e) { e.parentNode && e.parentNode.insertBefore(a, e.nextSibling) }) }, append: function (v) { this.caller(function (e) { if (v.nodeName) { e.appendChild(v) } else { e.innerHTML += v } }) }, val: function (v) { var e = this._single(); if (v == null) return e.value; e.value = v }, remove: function () { var a = this; this.caller(function (e, i) { a.eleList.remove(i); try { e.parentNode.removeChild(e); e.outerHTML = "" } catch (err) { } }); this.fnList = null } } }; JR.prototype.dom = { _b: {}, set: function (a) { this._b = a }, id: function (a) { return document.getElementById(a) }, fitHeight: function (e, a) { var b = e.parentNode; var c = e.nextSibling; var d = /;(\s*)height:(.+);/ig; var f = (b == document.body ? Math.max(document.body.clientHeight, document.documentElement.clientHeight) : b.offsetHeight) - e.offsetTop; while (c) { if (c.nodeName[0] != '#') { f -= c.offsetHeight } c = c.nextSibling } f -= a || 0; if (d.test(e.style.cssText)) { e.style.cssText = e.style.cssText.replace(d, '; height:' + f + 'px;') } else { e.style.cssText += 'height:' + f + 'px;' } }, $: function (a, b, c) { var d = "#" + a; if (b && b != "" && b != "*") { d += " " + b } if (c instanceof Object) { var s = c["className"]; if (s == null) { s = c["class"] } if (s) { d += " ." + s } } var e = this._b.selector.finds(d); var f = e.length; if (f > 1) { return e } else if (f == 1) { return e[0] } return null }, getsByClass: function (a, b) { return jr.selector.getByClassName(b, a) } }; JR.prototype.cookie = { write: function (a, b, c) { var d = ""; if (c) { d = new Date((new Date()).getTime() + c); d = "; expires=" + d.toGMTString() } document.cookie = a + "=" + escape(b) + d }, remove: function (a) { this.write(a, "", -9) }, read: function (a) { var b = ""; var c = a + "="; if (document.cookie.length > 0) { var d = document.cookie.indexOf(c); if (d !== -1) { d += c.length; var e = document.cookie.indexOf(";", d); if (e === -1) e = document.cookie.length; b = unescape(document.cookie.substring(d, e)) } } return b } }; JR.prototype.event = { add: function (a, b, c, d) { if (!a.attachEvent && !a.addEventListener) { alert('event error! parameter:' + ele + ',event:' + b); return } document.attachEvent ? a.attachEvent('on' + b, c) : a.addEventListener(b, c, d || true) }, remove: function (a, b, c, d) { document.detachEvent ? a.detachEvent('on' + b, c) : a.removeEventListener(b, c, d || true) }, src: function (a) { var e = a ? a : window.event; return e.target || e.srcElement }, stopBubble: function (a) { a = a || window.event; a.cancelBubble = true; if (a.stopPropagation) { a.stopPropagation() } }, preventDefault: function (a) { a = a || window.event; if (a.preventDefault) { a.preventDefault() } else { a.returnvalue = false } } }; JR.prototype.xhr = { maxRequest: 4, filter: function (a, b, c) { if (a == 2) { var d = /<title>(.+)<\/title>/.exec(c); if (d && d.length > 0) { alert(d[1]); return false } } return true }, httpStack: null, procStack: [], newHttpReq: function () { return window.XMLHttpRequest ? new XMLHttpRequest() : (new ActiveXObject("MSXML2.XMLHTTP") || new ActiveXObject("MICROSOFT.XMLHTTP")) }, init: function () { if (this.httpStack) return; this.httpStack = []; for (var i = 0; i < this.maxRequest; i++) { this.httpStack[i] = { state: 0, http: this.newHttpReq(), } } }, getUrl: function (a, b, c) { if (a == null || a == '') { a = location.href } if (b == 'GET' && c != false && a.indexOf('#') == -1) { a = this.urlJoin(a, 'rd=' + Math.random()) } return a }, request: function (d, e) { this.init(); var f = (d.method || "GET").toUpperCase(); if (this.filter && !this.filter(0, f)) { return false } var g = { uri: this.getUrl(d.uri, f, d.random), params: d.params || '', method: f, async: d.async === false ? false : d.async || true, data: (d.data || 'text').toLowerCase(), call: e }; g.params = this.paramsToString(d.params); var h = function (a, b, c) { a.state = 1; a.http.open(c.method, c.uri, c.async); a.http.onreadystatechange = function () { if (a.http.readyState === 4) { if (a.http.status === 200) { a.state = 0; b.procStack.pop(); if (b.filter && !b.filter(1, c.method, a.http.responseText)) { return false } if (c.call.success) { c.call.success(c.data === "text" ? a.http.responseText : (c.data === 'json' ? JSON.parse(a.http.responseText) : a.http.responseXML)) } } else if (c.call.error) { a.state = 0; b.procStack.pop(); if (b.filter && !b.filter(2, c.method, a.http.responseText)) { return false } if (c.call.error) c.call.error(a.http.responseText) } }; return true }; if (c.method === "POST") a.http.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); a.http.send(c.params) }; this._processReq(g, h) }, _processReq: function (a, b) { var c = setInterval((function (t) { return function () { if (t.procStack.length < t.maxRequest) { t.procStack.push(0); for (var i = 0; i < t.maxRequest; i++) { if (t.httpStack[i].state === 0) { try { b(t.httpStack[i], t, a) } catch (exc) { if (a.call.error) a.call.error('request may be blocked!') } break } } clearInterval(c) } } }(this)), 20) }, _callback: function (a, b) { return { success: function (r) { if (a && a instanceof Function) a(r) }, error: function (r) { if (b && a instanceof Function) b(r) } } }, get: function (a, b, c) { this.request(a instanceof Object ? this.getUrl(a) : { uri: a }, this._callback(b, c)) }, post: function (a, b, c, d) { this.request({ uri: a, method: 'POST', params: b }, this._callback(c, d)) }, jsonPost: function (a, b, c, d) { this.request({ uri: a, params: b, method: 'POST', data: 'json' }, this._callback(c, d)) }, paramsToString: function (a) { if (a instanceof Object) { var b = ''; var i = 0; for (var c in a) { if (i++ !== 0) { b += '&' } b += c + '=' + encodeURIComponent(a[c]) } return b } return a }, urlJoin: function (a, b) { return a + (a.indexOf('?') == -1 ? '?' : '#') + b }, jsonp: (function (j) { return function (c, d, e) { d = d || {}; var s = document.createElement('SCRIPT'); var h = "$callback_" + (10000 + parseInt(Math.random() * 90000)); d['callback'] = h; j[h] = (function (g, t, s, f, b) { return function (a) { t.jsonpGC(g, f, s); b(a) } }(j, this, s, h, e)); s.setAttribute('src', this.urlJoin(c, this.paramsToString(d))); var i = (function (g, t, s, f, a) { return function () { t.jsonpGC(g, f, s); a('jsonp : Invalid JSON data returned!', 1) } }(j, this, s, h, e)); if (document.attachEvent) { s.attachEvent('onerror', i) } else { s.addEventListener('error', i, true) } document.getElementsByTagName('head')[0].appendChild(s) } }(window)), jsonpGC: function (a, b, e) { try { delete a[b] } catch (ex) { a[b] = null } e.parentNode.removeChild(e) } }; JR.prototype.ldScript = function (a, b, c) { var d = null; var e = document.documentElement.getElementsByTagName("HEAD"); if (e.length != 0) d = e[0]; else d = document.body; var f = d.getElementsByTagName('SCRIPT'); var g = 0; for (var i = 0; i < f.length; i++) { if (f[i].getAttribute('src') && f[i].getAttribute('src').toLowerCase() == a.toLowerCase()) { g = 1 } } if (!g) { var h = document.createElement('SCRIPT'); if (b) h.onreadystatechange = h.onload = b; if (c) h.onerror = c; h.setAttribute('type', 'text/javascript'); h.setAttribute('src', a); d.appendChild(h) } }; var $jr = new JR().__init__(); $jr.extend({ $: function (a, b, c) { return $jr.dom.$(a, b, c) }, style: function (a, b) { var e = a.nodeName ? a : this.dom.id(a); if (b instanceof String) { e.style.cssText = b; return true } return this.fn.init([e], this).css(b) }, loadHTML: function (a, b) { var c = /<body[^>]*>([\s\S]+)<\/body>/im; var d = /<script((.|\n)*?)>([\s\S]*?)<\/script>/gim; var f = b.match(c); if (f == null) { f = ['', b] } if (!a.nodeName) a = this.dom.$(a); if (a) { try { a.innerHTML = f[1].replace(d, '').replace(/<style([^>]+)>/ig, '<span style="display:none" class=\"for-ie\">_</span><style$1>'); this.$fn(a).find(".for-ie").each(function (i, e) { e.remove() }); if (window.navigator.userAgent.indexOf('Chrome') != -1) { this.each(a.getElementsByTagName('STYLE'), function (i, e) { a.removeChild(e); document.getElementsByTagName('HEAD')[0].appendChild(e) }) } } catch (ex) { if (window.console) { console.log(ex.message) } } } var g = /^[\n\s]+$/g; var h = /type=["']*text\/javascript["']*/i; var j; d.lastIndex = 0; while ((j = d.exec(b)) != null) { if (j[1].indexOf(' type=') == -1 || h.test(j[1])) { if (!g.test(j[3])) { this.eval(j[3]) } } } }, load: function (c, d, e, f) { (function (b) { b.xhr.get(d, function (a) { b.loadHTML(c, a); if (e) { e(a) } }, f) }(this)) }, ld: function (c, d) { (function (j, b) { j.xhr.get({ uri: b + c + '.js', async: false, random: false }, function (a) { j.eval(a) }) }(this, d || this.WORKPATH)) } }); JR.prototype.plugin = JR.prototype.extend; JR.prototype.ie6 = function () { return /MSIE\s*6\.0/.test(window.navigator.userAgent) }; JR.prototype.lazyRun = function (a, b) { if (a) { setTimeout(a, b || 120) } }; $jr.extend({ screen: { width: function () { return Math.max(document.body.clientWidth, document.documentElement.clientWidth) }, height: function () { return Math.max(document.body.clientHeight, document.documentElement.clientHeight) }, offsetWidth: function () { return Math.max(document.body.offsetWidth, document.documentElement.offsetWidth) }, offsetHeight: function () { return Math.max(document.body.offsetHeight, document.documentElement.offsetHeight) } }, supportHTML5: navigator.geolocation != null, getPosition: function (e) { return (e.nodeName ? e : this.$(e)).getBoundingClientRect() } }); var jr = $jr;
jr.extend({ json: { prefix: 'field', _objreg: /(.+)\[([^\]]+)\]/, _dtReg: /^(\d{4}((\/|-)\d{2}){2})T(\d{2}(:\d{2}){2})((\.\d+)*)$/i, _each: function (a, b) { for (var i = 0; i < a.length; i++) { if (b) b(i, a[i]) } }, _getFields: function (b) { var c = this.prefix; var d = {}; var f; var g, subProName, proValue; if (!b.nodeName) b = document.getElementById(b); var h = this._objreg; this._each(b.getElementsByTagName('*'), function (i, e) { if (e.nodeName != '#text' && e.nodeName != '#comment') { g = e.getAttribute(c); if (g) { if (h.test(g)) { var a = h.exec(g); g = a[1]; subProName = a[2]; if (d[g] == null) { d[g] = {} } d[g][subProName] = e } else { d[g] = e } if (!e.name) e.setAttribute('name', c + '_' + g) } } }); return d }, _bindField: function (a, b) { if (this._dtReg.test(b)) { var c = this._dtReg.exec(b); if (c[4] == '00:00:00') { b = b.replace(this._dtReg, '$1') } else { b = b.replace(this._dtReg, '$1 $4') } } switch (a.nodeName) { case 'TEXTAREA': case 'INPUT': switch (a.type) { default: a.value = b; break; case "radio": var d = document.getElementsByName(a.name); for (var i = 0; i < d.length; i++) { d[i].checked = d[i].value == b } break; case 'checkbox': var e = false; if ((b == true && b.toString() != '1') || b == a.value) { e = true } else if (b instanceof Array) { for (var i in b) { if (b[i] == a.value) { e = true; break } } } a.checked = e }break; case 'IMG': a.src = b; break; case 'SELECT': a.value = b; break; default: a.innerHTML = b; break } }, _getFieldVal: function (a) { var b = ''; switch (a.nodeName) { case 'TEXTAREA': case 'INPUT': switch (a.type) { default: b = a.value; break; case 'radio': var c = document.getElementsByName(a.name); for (var i = 0; i < c.length; i++) { if (c[i].checked) { b = c[i].value; break } } break; case 'checkbox': b = a.checked ? a.value : ''; break }break; case 'IMG': b = a.src; break; case 'SELECT': b = a.selectedIndex == -1 ? '' : a.options[a.selectedIndex].value; break; default: b = a.innerHTML; break }return b }, bind: function (a, b, c) { var d; var e; var f; d = this._getFields(a); for (var g in d) { e = d[g]; if (c && c instanceof Function) { f = c(g, b[g]) } else { f = b[g] } if (f != null) { if (f instanceof Object) { if (f.length) { for (var i in e) { this._bindField(e[i], f) } } else { for (var i in f) { if (e[i]) { this._bindField(e[i], f[i]) } } } continue } this._bindField(e, f) } } }, __convert: function (a, b, c) { var d; var e; var f; var g = {}; var h = ''; d = this._getFields(a); for (var k in d) { e = d[k]; if (e.nodeName) { f = this._getFieldVal(e); if (c && c instanceof Function) { f = c(k, f) } g[k] = f; h += k + '=' + f + '&' } else { g[k] = {}; var j = 0; var l = false; for (var i in e) { if (j++ == 0 && /^\d+$/.test(i)) { g[k] = []; l = true } if (e[i]) { f = this._getFieldVal(e[i]); if (c && c instanceof Function) { f = c(k, f) } if (f && f != '') { if (l) { g[k].push(f) } else { g[k][i] = f } } h += k + '[' + i + ']=' + f + '&' } } } } return b == "object" ? g : h.replace(/&$/g, '') }, toObject: function (a) { return this.__convert(a, 'object') }, toQueryString: function (a) { return this.__convert(a, 'string') }, toString: function (a) { return this.__convert(a, 'string').replace(/&/g, ';').replace(/=/g, ':') }, string: function (o) { var a = this; var b = []; var c = function (s) { if (typeof s == 'object' && s != null) a.string(s); return /^(string|number)$/.test(typeof s) ? "'" + s + "'" : s }; for (var i in o) { if (o.hasOwnProperty(i)) { var d = c(o[i]); if (d.pop) { b.push("'" + i + "':[\'" + escape(d.join('\',\'')) + '\']') } else { b.push("'" + i + "':" + escape(d)) } } } return '{' + escape(b.join(',')) + '}' } } });
var DialogText = { ALERT_MSG_TPL: '<div class="ui-alert-message">' + '<span class="alert-icon alert-icon-{icon}"></span>{msg}</div>', ALERT_BTN_TPL: '<input type="button" tag="{tag}" value="{text}"/>', ALERT_ALL_TITLE: '鎻愮ず', ALERT_BTN_OK_TEXT: '纭畾', ALERT_BTN_CANCEL_TEXT: '鍙栨秷' }; function simpleDialog(dialogOptions) { this.window = window; this.opts = { _inited: false, id: parseInt(1000 + Math.random() * 8999 + (new Date()).valueOf() % 1000), title: '', drag: !false, className: "ui-dialog", setupFade: false, canNotClose: false, onclose: null, cross: !false, textArr: DialogText }; this.eles = { panel: null, con: null, box: null }; this.win = window; this.doc = null; for (var i in dialogOptions) { if (dialogOptions[i]) { this.opts[i] = dialogOptions[i] } } if (this.opts.cross != false) { while (this.win.parent != this.win) { this.win = this.win.parent } } this.doc = this.win.document } simpleDialog.prototype = { newElement: function (node, opt) { var e = document.createElement(node); for (i in opt) { e.setAttribute(i, opt[i]) } return e }, _initialize: function () { with (this.opts) { if (_inited) { return false } var document = this.doc; var absCss = 'position:fixed;top:0;left:0;bottom:0;right:0;margin:auto'; this.eles.panel = this.newElement('DIV', { "id": 'panel_' + id, "class": className }); document.body.appendChild(this.eles.panel); this.eles.panel.appendChild(this.newElement('DIV', { "class": 'bg bglayer', "style": 'z-index:99;' + absCss })); css = 'z-index:100;' + absCss; this.eles.box = this.newElement('DIV', { "class": 'box', "style": css }); this.eles.panel.appendChild(this.eles.box); if (title) { var titHtml = '<span class="left corner" style="position:absolute;left:0;top:0">&nbsp;</span><span class="txt">' + title + '</span>'; if (!canNotClose) { titHtml += '<span class="close" style="position:absolute;right:5px;top:0;">' + '<i class="fa fa-times" aria-hidden="true"></i></span>' } titHtml += '<span class="right corner" style="position:absolute;right:0;top:0">&nbsp;</span>'; var elem = this.newElement('DIV', { "class": 'title', "style": 'user-select:none;-ms-user-select:none;-moz-user-select:none;-webkit-user-select:none;' }); elem.innerHTML = titHtml; this.eles.box.appendChild(elem); elem.getElementsByTagName('SPAN')[2].onclick = (function (d) { return function () { d.close() } })(this); this.win['dialog_' + this.id] = this; if (drag) { new dragObject(elem, this.win).start(this.eles.box) } } this.eles.con = this.newElement('DIV', { "class": 'content con' }); this.eles.box.appendChild(this.eles.con); if (title) { var be = document.createElement("div"); be.className = 'bottom'; be.style.cssText = "position:relative;"; be.innerHTML = '<span class="left corner" style="position:absolute;left:0;">&nbsp;</span><span class="txt">&nbsp;</span><span class="right corner" style="position:absolute;right:0;">&nbsp;</span>'; this.eles.box.appendChild(be) } _inited = true } }, getPanel: function () { return this.eles.panel }, hiddenBox: function () { with (this.eles.box) { style.visibility = 'hidden'; style.left = 'inherit'; style.bottom = 'inherit' } }, showBox: function () { with (this.eles.box) { style.visibility = ''; style.width = offsetWidth + 'px'; style.height = scrollHeight + 'px'; style.left = '0'; style.bottom = '0' } }, getFrameWindow: function () { var frames = this.eles.panel.getElementsByTagName('IFRAME'); if (frames.length > 0) { return frames[0].contentWindow } return null }, getTargetWindow: function () { return this.win }, getWindow: function () { return this.window }, callback: function (func, args) { var f = this.getWindow()[func]; if (f && f instanceof Function) { f(args) } }, open: function (url, width, height, scroll) { this._initialize(); this.hiddenBox(); if (url.length > 0 && url[0] != "/" && url.indexOf('https://') == -1 && url.indexOf('http://') == -1) { var path = this.getWindow().location.pathname; url = path.substring(0, path.lastIndexOf("/") + 1) + url } var pl = this.eles.con; this.eles.con.innerHTML += "<iframe frameborder='0' scrolling='" + (scroll || 'auto') + "' src='" + url + "' width='" + (width || '100%') + "' style='padding:0' height='" + (height || '100%') + "'></iframe>"; pl.style.width = Math.max(pl.scrollWidth, width) + 'px'; pl.style.height = Math.max(pl.scrollHeight, height) + 'px'; this.showBox() }, write: function (html) { this._initialize(); this.hiddenBox(); var pl = this.eles.con; if (!this.opts.title) { pl.innerHTML = html } else { var divs = pl.getElementsByTagName('DIV'); for (var i = 1; i < divs.length; i++) { pl.removeChild(divs[i]) } pl.innerHTML += html } this.showBox() }, async: function (uri, method, params, func) { return this.load(uri, method, params, func) }, load: function (uri, method, params, func) { this._initialize(); this.hiddenBox(); var ajax = jr.xhr; var call = (function (d) { return function (x) { jr.loadHTML(d.eles.con, x); d.showBox(); if (func) func(x) } })(this); if (!method || method.toLowerCase() == "get") { ajax.get(uri, call) } else { ajax.post(uri, params, call) } }, custom: function (p) { this._initialize(); this.hiddenBox(); var d = this; d.write(jr.template(this.opts.textArr.ALERT_MSG_TPL, { msg: p.message, icon: p.icon })); var buttonsHtml = ''; for (var i = 0; i < p.buttons.length; i++) { var e = p.buttons[i]; if (e && e.tag) { buttonsHtml += jr.template(this.opts.textArr.ALERT_BTN_TPL, { tag: e.tag, text: e.text }) } } var rd = Math.floor(Math.random() * 10000); d.write('<div class="ui-alert-control" id="ui-alert-control-' + rd + '">' + buttonsHtml + '</div>'); this.showBox(); var pl = d.getTargetWindow().document.getElementById('ui-alert-control-' + rd); var btns = pl.getElementsByTagName('INPUT'); for (var i = 0; i < btns.length; i++) { if (i === 0) { btns[i].focus() } btns[i].onclick = (function (d, p) { return function () { var tag = this.getAttribute('tag'); if (p.click && p.click instanceof Function) { if (p.click(tag, d)) { d.close() } } else { d.close() } } })(d, p) } return d }, closeDialog: function () { this.win.document.body.removeChild(this.eles.panel) }, close: function (callback) { if (this.opts.onclose != null && this.opts.onclose() == false) { return false } this.closeDialog(); if (callback) callback(); try { delete this.win['dialog_' + this.id] } catch (ex) { this.win['dialog_' + this.id] = null } this.opts._inited = false } }; function dragObject(elem, window) { this.elem = elem; this.win = window } dragObject.prototype.regist = function (target, cursor, moveHandler, stopHandler) { var o = this.elem; target = target ? target : o; var sx, sy; var document = this.win == null ? document : this.win.document; o.style.cursor = cursor || "move"; var move = moveHandler || function (e) { e = e || event; window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty(); if (e.preventDefault) e.preventDefault(); with (target.style) { position = "absolute"; margin = 'inherit'; left = e.clientX - sx + "px"; top = e.clientY - sy + "px" } }; jr.event.add(o, "mousedown", function (e) { e = e || event; if (e.button == 1 || e.button == 0) { sx = e.clientX - target.offsetLeft; sy = e.clientY - target.offsetTop; jr.event.add(document, 'mousemove', move, false); jr.event.add(document, 'mouseup', stopDrag, false) } }, false); var stopDrag = function () { jr.event.remove(document, 'mousemove', move, false); jr.event.remove(document, 'mouseup', stopDrag, false); if (stopHandler && stopHandler instanceof Function) stopHandler() } }; dragObject.prototype.custom = function (obj, cursor, moveHandler, stopHandler) { return this.regist(obj, cursor, moveHandler, stopHandler) }; dragObject.prototype.start = function (obj) { this.regist(obj, null, null, null) }; var SimpleDialog = { create: function (dialogOpts) { return new simpleDialog(dialogOpts) }, create2: function (title, usedrag, cross, onclose, className) { return new simpleDialog({ title: title, drag: usedrag || false, cross: cross || false, "className": className, onclose: onclose }) }, getDialog: function () { var dialog = null; var reg = /^dialog_/i; var targetWin = window; var getFromWin = function (win) { var d = null; for (var i in win) { if (reg.test(i) && win[i] != null) { d = win[i]; break } } return d }; do { dialog = getFromWin(targetWin); if (dialog == null) { targetWin = targetWin.parent; dialog = getFromWin(targetWin) } if (dialog) { break } } while (targetWin.parent != targetWin); return dialog }, close: function () { var d = this.getDialog(); if (d) d.close() }, customAlert: function (p) { var title = DialogText.ALERT_ALL_TITLE + '-' + (p.title || ''); title = title.replace(/^-|-$/g, ''); var d = this.create({ title: title, className: "ui-dialog custom-dialog", drag: p.drag || true, cross: p.cross || true, canClose: false }); return d.custom(p) }, alert: function (msg, func, icon, text) { return this.customAlert({ icon: icon, message: msg, buttons: [{ tag: 'ok', text: text || DialogText.ALERT_BTN_OK_TEXT }], click: function () { if (func instanceof Function) func(); return true } }) }, confirm: function (msg, func, textArr) { var okTxt = DialogText.ALERT_BTN_OK_TEXT; var cancelTxt = DialogText.ALERT_BTN_CANCEL_TEXT; if (textArr instanceof Array && textArr.length === 2) { okTxt = textArr[0]; cancelTxt = textArr[1] } return this.customAlert({ icon: 'confirm', message: msg, buttons: [{ tag: 'ok', text: okTxt }, { tag: 'cancel', text: cancelTxt }], click: function (tag) { if (func instanceof Function) { func(tag != 'cancel') } return true } }) } }; (function (r) { var obj = { dialog: window.SimpleDialog, drag: function (ele, win) { return new drag(ele, win) } }; r.extend(obj) })(window.jr);

var $b = jr;
var j6 = $b;